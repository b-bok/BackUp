package com.kh.chap01_abstraction.run;
import com.kh.chap01_abstraction.model.vo.*;
public class Run {

	
	/*
	 * 1. 객체 지향 언어 : "객체"를 "지향"하는 언어 "객체 중심"으로 돌아간다고 생각
	 * 
	 * 2. 객체란 : 사전적 의미로 현실세계에 독립적으로 존재(목적이 있고 존재가치가 있는 모든것)
	 * 
	 * 3. 객체지향 프로그래밍 : 현실세계의 독립적인 존재(객체)간의 상호작용 => 가상세계(코드)로 구현하는 과정
	 * 
	 * 4. 구현하고자하는 프로그램 상의 필요한 객체를 만들기 위해서 (즉, 생성하기 위해서) : 클래스라는 틀을 먼저 만들어야됨!!
	 * 															 (각 객체의 속성을 담는 그릇 같은 것)		
	 * 															어떻게? : 추상화 + 캡슐화 접목해서
	 * 
	 * 5. 추상화 과정 
	 * 		1) 내가 구현하고자 하는 프로그램에서 필요한 객체 생각해보기
	 * 		2) 그 객체들이 가지고 있는 공통적인 속성, 기능들을 모두 추출
	 * 		3) 그렇게 추출한 것 가지고 구현 프로그램 "실질적인 목적"에 맞춰  필요한 것만 추리기
	 * 		4) 그렇게 추린 속성을 가지고, 어떤 자료형과 변수명을 쓸지 생각
	 * 	
	 * 
	 * 		ex) 학생관련 프로그램
	 * 			1) 학생관련 객체 (홍길동, 김영희 ....)
	 * 			2) 공통적인 속성과 기능(이름, 나이, 주소, 전화번호, 키, 머리색깔, 국어점수, 먹는량, 영어점수) 
	 * 			3)  학생 "인적사항 "관리 프로그램 : 이름, 나이, 주소, 전화번호 
	 * 				학생 "성적" 관리 프로그램 : 이름, 학년, 반, 국어점수, 영어점수
	 * 				학생 "건강" 관리 프로그램 : 이름 ,키, 몸무게, 먹는량
	 * 
	 * 	최종적 결과 : 이름, 나이, 키
	 * 			4)	이름 : String name;
 					나이 : int age;
 					키 : double height;
 					
 		6. 선정된 것을 가지고 본격적 프로그래밍 진행
 		
 			1) "변수"만을 가지고 프로그램을 구현?
 				* 변수 - 하나의 자료형 하나의 값만 저장 가능
 				* 
 				* 홍길동 객체 -> String name1 = "홍길동"; int age1 = 20; double height1 = 162.3;
 				* 김말똥 객체 -> String name2 = "김말똥"; int age2 = 20; double height2 = 162.3;
 				* 김영희 객체 -> String name3 = "김영희"; int age3 = 20; double height3 = 162.3;
 				* 
 				* .... 수천개의 객체가 필요하다....
 			
 				* 
 				* 			
	 * 		2) "배열"을 가지고 프로그램을 구현?
	 * 			*배열 - 하나의 자료형 여러값만 저장 가능
	 * 			
	 * 			학생들의 이름들을 보관하는 String[] name = {}; 
	 * 			학생들의 나이를 보관하는 int[] age = {};
	 * 			학생들의 키를 보관하는 double[] height = {};				
	 * 
	 * 			변수보다 낫지만 어떤가 문제 발생>
	 * 			추가적인 데이터를 넣을 때 크기 문제 발생, 혹시라도 삭제할 때 실수로 하나라도 값을 제대로 못지우면 데이터 불일치 발생
	 * 			
	 * 		3) 그래서 나온 개념이 구조체의 개념!
	 * 
	 * 			* 구조체 - 여러개의 자료형의 여러개의 값을 담을 수 있는 배열같은 형태
	 * 			
	 * 			String, int, double값을 같이 보관할 수 있는
	 * 			==> 그게 바로 클래스!	
	 * 			Student 클래스를 만들어서 필드를 만들고 String, int, double 값 보관
	 */
	
	
	public static void main(String[] args) {
		
		int[] arr = new int[5];
		
		// 홍길동 객체
		// new라는 연산자를 통해 Heap영역에 공간을 할당받아야됨(공간확보)
		Student hong = new Student(); // 생성
		hong.name = "홍길동";
		hong.age = 20;
		hong.height = 162.3;
		// 직접 접근을 통한 값 초기화
		

		System.out.println(hong.name + "의 나이는 " + hong.age + "세이며 키는 " + hong.height + "cm입니다." );
		
		
		// 김말똥 학생 객체
		Student ddong = new Student();
		ddong.name = "김말똥";
		ddong.age = 20;
		ddong.height = 171.1;
		
		System.out.println(ddong.name + "의 나이는 " + ddong.age + "세이며 키는 " + ddong.height + "cm입니다." );
		// 직접접근 하게 되면 --> 외부에서 값을 마음대로 변경할 수 있음
		// --> 객체지향 설계원칙 중에 정보은닉 기술중에 일부분이 "캡슐화"
		
		
	}

}
